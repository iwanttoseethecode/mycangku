package com.guantang.cangkuonline.Jpushhlper;

import java.lang.ref.WeakReference;
import java.util.List;

import org.json.JSONException;
import org.json.JSONObject;

import com.guantang.cangkuonline.R;
import com.guantang.cangkuonline.activity.NewLoginActivity;
import com.guantang.cangkuonline.application.BaseActivity;
import com.guantang.cangkuonline.application.MyApplication;
import com.guantang.cangkuonline.dialog.CommonDialog;
import com.guantang.cangkuonline.dialog.CommonDialog.DialogContentListener;

import android.app.ActivityManager;
import android.app.ActivityManager.RunningAppProcessInfo;
import android.app.Dialog;
import android.app.Notification;
import android.content.BroadcastReceiver;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.TextView;
import cn.jpush.android.api.BasicPushNotificationBuilder;
import cn.jpush.android.api.JPushInterface;

public class JpushBroadcastReceiver extends BroadcastReceiver {
	
	private static final String TAG = "JPush";
	private Context mContext;
	
	@Override
	public void onReceive(Context context, Intent intent) {
		// TODO Auto-generated method stub
		this.mContext = context;
		Bundle bundle = intent.getExtras();
		
		if (JPushInterface.ACTION_REGISTRATION_ID.equals(intent.getAction())) {
            String regId = bundle.getString(JPushInterface.EXTRA_REGISTRATION_ID);
            Log.d(TAG, "[MyReceiver] 接收Registration Id : " + regId);
            //send the Registration Id to your server...
                        
        } else if (JPushInterface.ACTION_MESSAGE_RECEIVED.equals(intent.getAction())) {
        	Log.d(TAG, "[MyReceiver] 接收到推送下来的自定义消息: " + bundle.getString(JPushInterface.EXTRA_MESSAGE));
        	
        	
			try {
				JSONObject jsonObject = new JSONObject(bundle.getString(JPushInterface.EXTRA_MESSAGE)); 
				
				switch(jsonObject.getInt("Status")){
				case 1:
//					dealLoginDownNotify(mContext, jsonObject);
					new dealLoginDownNotifyAsyncTask().execute(jsonObject);
					break;
					default:
						break;
				}
				
			} catch (JSONException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
        	
        	
        
        } else if (JPushInterface.ACTION_NOTIFICATION_RECEIVED.equals(intent.getAction())) {
            Log.d(TAG, "[MyReceiver] 接收到推送下来的通知");
            int notifactionId = bundle.getInt(JPushInterface.EXTRA_NOTIFICATION_ID);
            Log.d(TAG, "[MyReceiver] 接收到推送下来的通知的ID: " + notifactionId);
            
        	
        } else if (JPushInterface.ACTION_NOTIFICATION_OPENED.equals(intent.getAction())) {
            Log.d(TAG, "[MyReceiver] 用户点击打开了通知");
            
            BaseActivity baseActivity=(BaseActivity) MyApplication.getInstance().peekActivityToStack();
            
            if(baseActivity != null){
            	Intent i = new Intent(context, baseActivity.getClass());
            	i.putExtras(bundle);
            	i.setFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);
            	context.startActivity(i);
            }
        	
        	
        } else if (JPushInterface.ACTION_RICHPUSH_CALLBACK.equals(intent.getAction())) {
            Log.d(TAG, "[MyReceiver] 用户收到到RICH PUSH CALLBACK: " + bundle.getString(JPushInterface.EXTRA_EXTRA));
            //在这里根据 JPushInterface.EXTRA_EXTRA 的内容处理代码，比如打开新的Activity， 打开一个网页等..
        	
        } else if(JPushInterface.ACTION_CONNECTION_CHANGE.equals(intent.getAction())) {
        	boolean connected = intent.getBooleanExtra(JPushInterface.EXTRA_CONNECTION_CHANGE, false);
        	Log.w(TAG, "[MyReceiver]" + intent.getAction() +" connected state change to "+connected);
        } else {
        	Log.d(TAG, "[MyReceiver] Unhandled intent - " + intent.getAction());
        }
	}
	
	
	private boolean isTopApp(Context context) {
		ActivityManager mActivityManager = (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE);
		List<RunningAppProcessInfo> appProcesses = mActivityManager .getRunningAppProcesses();  
        for (RunningAppProcessInfo appProcess : appProcesses) {  
            if (appProcess.processName.equals("com.guantang.cangkuonline")) {  
                /* 
                BACKGROUND=400 EMPTY=500 FOREGROUND=100 
                GONE=1000 PERCEPTIBLE=130 SERVICE=300 ISIBLE=200 
                 */  
//                Log.i(context.getPackageName(), "此appimportace ="  
//                        + appProcess.importance  
//                        + ",context.getClass().getName()="  
//                        + context.getClass().getName());  
                if (appProcess.importance == RunningAppProcessInfo.IMPORTANCE_FOREGROUND) {  
//                    Log.i(context.getPackageName(), "处于前台"  
//                            + appProcess.processName);  
                    return true;  
                } else {  
//                    Log.i(context.getPackageName(), "处于后台"  
//                            + appProcess.processName);  
                    return false;  
                }  
            }  
        }  
		
		
//		List<ActivityManager.RunningTaskInfo> tasks = mActivityManager.getRunningTasks(1);
//		if (tasks != null && !tasks.isEmpty()) {
//			if (tasks.get(0) != null) {
//				ComponentName topActivity = tasks.get(0).topActivity;
//				
//				if (topActivity.getPackageName().equals("com.guantang.cangkuonline")) {
//					return true;
//				}
//			}
//		}
		return false;
	}
	
	
//	/**
//	 * 将后台进程切换到前台
//	 * */
//	private void backgroundToFront(Context context){
//		ActivityManager mActivityManager = (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE);
//		List<ActivityManager.RunningTaskInfo> tasks = mActivityManager.getRunningTasks(1);
//		
//		
//		for(ActivityManager.RunningTaskInfo task : tasks){
//			ComponentName topActivity = task.topActivity;
//			
//			if (topActivity.getPackageName().equals("com.guantang.cangkuonline")) {
//				mActivityManager.moveTaskToFront(task.id, ActivityManager.MOVE_TASK_WITH_HOME);
//				break;
//			}
//		}
//	}
	
	/**
	 * 处理强迫下线的事情
	 * 
	 * */
	private void dealLoginDownNotify(Context context,JSONObject jsonObject) throws JSONException{
		
		BaseActivity baseActivity=(BaseActivity) MyApplication.getInstance().peekActivityToStack();
		if(baseActivity == null){
			return;
		}
		String message = null;
		message = jsonObject.getString("Message");
		if(isTopApp(context)){
    		baseActivity.loginDownDialog(message);
    	}else{
    		baseActivity.setLoginDownFlag(true);
    		baseActivity.setContentMessage(message);
    	}
	}
	
	/**
	 * 处理强迫下线的事情,开异步
	 * 
	 * */
	class dealLoginDownNotifyAsyncTask extends AsyncTask<JSONObject, Void, Boolean>{
		
		BaseActivity baseActivity;
		WeakReference<BaseActivity> ActivtiyWeak;
		String message;
		
		@Override
		protected Boolean doInBackground(JSONObject... params) {
			// TODO Auto-generated method stub
			ActivtiyWeak = new WeakReference<BaseActivity>((BaseActivity) MyApplication.getInstance().peekActivityToStack());
			
			try {
				message = params[0].getString("Message");
			} catch (JSONException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			return isTopApp(mContext);
		}

		
		@Override
		protected void onPostExecute(Boolean result) {
			// TODO Auto-generated method stub
			super.onPostExecute(result);
			if(ActivtiyWeak.get() == null){
				return ;
			}
			if(result){
				ActivtiyWeak.get().loginDownDialog(message);
	    	}else{
	    		ActivtiyWeak.get().setLoginDownFlag(true);
	    		ActivtiyWeak.get().setContentMessage(message);
	    	}
			
		}
		
		
	}

	
}
